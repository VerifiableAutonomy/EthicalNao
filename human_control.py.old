#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 17 14:26:20 2017

@author: paul
"""

import time
#import inspect
#import shutil
#import os
#import sys
#import scipy.io as io
#import matplotlib.pyplot as pyplot
import numpy
#import warnings
import threading
import Queue

from library import HTMLlog
from library import Utilities
from library import Vicon
from library import Robot
from library import PathPlanning

WARN_TO = 3

class human_controller():
    def __init__(self, tracker, robot_q, human_q, session_path, settings_file, name='HUMAN_A', ip_robot = '192.168.20.225'):
        self.tracker = tracker
        self.log_file = session_path
        self.robot = Robot.Robot(ip_robot, name, self.tracker)
        self.robot_q = robot_q #Queue.Queue created in main thread that allows robot to pass messages
        self.human_q = human_q #Queue.Queue created in main thread that allows robot to get messages from human(s)
        self.warn_event = threading.Event()#threadsafe flag, set by robot when it gives a verbal warning
        self.point_event = threading.Event()#threadsafe flag, set by robot when it gives a pointing warning
        self.settings = {}
        #create a dictionary of settings from a settings file
        with open(settings_file) as f:
            for line in f:
                (key, val) = line.split()
                if ',' in val:
                    val = val.split(',')
                    for i,v in enumerate(val):
                        try:
                            val[i] = float(v)
                        except:
                            pass
                else:
                    try:
                        val = float(val)
                    except:
                        pass
                self.settings[key] = val

        self.Experiment_Logger = Utilities.Logger(name + '_control')
        self.human_graph = PathPlanning.Planner(self.tracker)
        self.name = name
        self.travelled_path = []
        self.graph_data = []

        if name + '_obstacles' in self.settings:#if a starting set of objects the robot knows about self_obstacles ['TARGET_A','TARGET_B']
            self.human_graph.set_obstacles(self.settings[name + '_obstacles'])

        if 'dangers' in self.settings:#if a starting set of dangers the robot knows about
            #currently dangers just exist in the CE
            self.CE.set_dangers(self.settings['dangers'])#at experiment start the robot assumes humans are ignorant of all dangers so only adds them to its own map
        
        
        self.robot.speed_factor = self.settings[name + '_speed_factor']
        self.robot.update_background_checks(0, False)
        self.robot.update_background_checks(2, False)
        self.robot.go_to_position(self.settings[name + '_start'][0], self.settings(name + '_start')[1], blocking=True)
        self.robot.go_to_orientation(self.settings[name + '_start_angle'], blocking=True)
        
        self.plan_process = threading.Thread(target=self.plan_Execute)
        #self.plan_process.start()
        
    def plan_Execute(self):
        responce_ctr = 0
        already_responded = False

        for sim_steps in range(1000):
            start = time.time()
            human_goal = self.settings[self.name + '_goal']
            current_position_human = self.tracker.get_position(self.name)[0:2]
            if type(human_goal) == str: human_goal_coordinates = Tracker.get_position(human_goal)[0:2]
            else: human_goal_coordinates = human_goal[:]
            
            distance_to_goal = (numpy.sum((current_position_human - human_goal_coordinates)**2))**0.5
            
            current_position_robot = self.tracker.get_position('ROBOT')[0:2]
            self.travelled_path.append(current_position_human)
            
            inter_robot_distance = numpy.sum((current_position_robot - current_position_human)**2)**0.5

            if inter_robot_distance < 0.5:
                self.robot.stop_robot()
                break
            
            #response timeout to allow both robots to grab only 1 warning message from the queue while the other grabs a 2nd
            if already_responded:
                if responce_ctr < WARN_TO:
                    responce_ctr = responce_ctr + 1
                else:
                    responce_ctr = 0
                    already_responded = False
                
            #if robot close enough to sense then add it as an obstacle, this assumes omni-directional vision, could make this directional
            #avoiding behaviour rather than stopping breaks things if done all the time, when I make things more complicated can maybe have human make choice if whether to stop or avoid based on situation (e.g., distance to goal or speed of robot)
            #if inter_robot_distance < 1: self.human_graph.set_obstacles(self.settings[name + '_obstacles'] + current_position_robot)#use set rather than add to add the current position of the robot so as to overwrite old position
            #if robot calls out and it is heard (hearing dep on dist, distance threshold will be in settings) then acknowledge and update map if possible
            if not self.robot_q.empty() and not already_responded:
                warning_msg = q.get()
                warning_type = warning_msg['warning_type']
                ack_msg = {'name':self.name, 'msg': warning_type + '_ack'}#could add location heard
                already_responded = True
                responce_ctr = 0
                #if robot warns of danger assume goal is dangerous and add it as an obstacle 
                if warning_type == 'warn' and inter_robot_distance < self.settings['hearing_dist']:#hearing_dist can be set to a low number to make the human never ack if wanted
                    self.human_graph.add_obstacles(human_goal)#if warned then assume current goal is dangerous so set it as an obstacle in the graph
                    self.human_q.put(ack_msg)#msg dict contains type of warning ack is for and name of robot
                #if robot points and it is seen (use inter-robot dist and angle to determine spotting efficacy) then acknowledge and update map if possible
                #if close enough and pointing estimate pointing target, accuracy based on relative angles and distances of robot, should be able to cheat and just distort the actual target pointed to
                elif warning_type == 'point' and inter_robot_distance < self.settings['pointing_dist']:#pointing_dist can be set to a low number to make the human never ack if wanted
                    self.human_graph.add_obstacles(warning_msg['location'])#add pointed to location as an obstacle. Will add to this so accuracy of point perception is distance and angle dependent
                    self.human_q.put(ack_msg)#msg dict contains type of warning ack is for and name of robot
            
            #iteration_number_string = str(sim_steps).zfill(3)
            #iteration_str = 'Iteration ' + iteration_number_string
            #planned_path_human = self.log_file + '/plots/human_plan_' + iteration_str + '.png'
            planned_path_human = False#comment this line out and uncomment the one above to make all the planned paths get plotted
            human_motion = self.human_graph.motion_command(current_position_human, human_goal, plot=planned_path_human)
            #Experiment_Logger.write('Human Vector Length: ' + str(human_motion['vector_length']))
        
            # do timing stuff
            end = time.time()
            duration = end - start
            self.Experiment_Logger.write('Iteration Duration: ' + Utilities.num2str(duration))
            data = self.human_graph.get_data()
            self.human_graph_data[sim_steps] = data
            next_position_human = human_motion['next_position']
            if distance_to_goal > 0.5: 
                self.robot.go_to_position(next_position_human[0], next_position_human[1])
            else:#if distance_to_goal < 0.5: 
                self.robot.stop_robot()
                break
            
            period = 1.0/self.settings['update_rate']
            remainder = period - duration
            if remainder > 0: time.sleep(remainder)
            self.Experiment_Logger.write('Sleeping: ' + Utilities.num2str(remainder))

            